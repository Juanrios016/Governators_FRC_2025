// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.SparkLowLevel.MotorType;

/*
 * methods of these librarys will be used to pass as arguments to pass to a
 * odometer object constructor
 * 
 * ODMETER class:
 * 
 * 
 * Gyro:
 * 
 * import edu.wpi.first.wpilibj.geometry.Rotation2d
 * import edu.wpi.first.wpilibj.ADXRS450_Gyro;
 * 
 * Encoder:
 * import edu.wpi.first.wpilibj.Encoder
 * 
 * Pose2d:
 * import edu.wpi.first.wpilibj.geometry.Pose2d
 * 
 */


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DrivingSubsytem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private SparkMax left;
    private SparkMax right;
    private DifferentialDrive differentialDrive1;
    private boolean reverseControls = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DrivingSubsytem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    left = new SparkMax(1, MotorType.kBrushed);
    right = new SparkMax(2, MotorType.kBrushed);
    

    differentialDrive1 = new DifferentialDrive(left, right);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void reverseControls() {
        reverseControls = !reverseControls;
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double left, double right) {
        if (reverseControls == false) {
            this.right.set(right);
            this.left.set(left);
        } else {
            this.right.set(-1 * right);
            this.left.set(-1 *left);
        }

    }


    public void printAmp() {
        System.out.println("left: " + left.getAppliedOutput());
        System.out.println("Right: " + right.getAppliedOutput());
        System.out.println("-----------------------------------");

    }
    public void readingEncoders() {
        System.out.println("Velocity left: " + left.getEncoder().getVelocity());
        // System.out.println("Velocity Right: " + right.getEncoder().getVelocity());
        // System.out.println("-----------------------------------");
        // System.out.println("Position left: " + left.getEncoder().getPosition());
        // System.out.println("Position Right: " + right.getEncoder().getPosition());
        System.out.println("------ end of testing -----");
    }

    public double getRightEncoder() {
        return left.getEncoder().getVelocity();
    }

}

